/// <summary>
/// AxLedgerJournalTrans
/// </summary>
class AxLedgerJournalTrans extends AxInternalBase
{
    LedgerJournalTrans                  ledgerJournalTrans;
    DimensionDynamicAccount             externalAccountNum;
    DimensionDynamicAccount             externalOffsetAccount;
    public LedgerJournalId parmJournalNum(LedgerJournalId _journalNum = '')
    {
        if (!prmisdefault(_journalNum))
        {
            this.setField(fieldnum(LedgerJournalTrans, JournalNum), _journalNum);
        }

        return ledgerJournalTrans.JournalNum;
    }

    /// <summary>
    /// Gets an empty <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <returns>
    /// An empty <c>LedgerJournalTrans</c> record.
    /// </returns>
    protected Common emptyRecord()
    {
        LedgerJournalTrans localLedgerJournalTrans;
        ;
        return localLedgerJournalTrans;
    }

    public TransDate parmTransDate(TransDate _transDate = dateNull())
    {
        if (!prmisdefault(_transDate))
        {
            this.setField(fieldnum(LedgerJournalTrans, TransDate), _transDate);
        }

        return ledgerJournalTrans.TransDate;
    }

    public DocumentDate parmDocumentDate(DocumentDate _documentDate = dateNull())
    {
        if (!prmisdefault(_documentDate))
        {
            this.setField(fieldnum(LedgerJournalTrans, DocumentDate), _documentDate);
        }

        return ledgerJournalTrans.DocumentDate;
    }

    public AmountCurCredit parmAmountCurCredit(AmountCurCredit _amountCurCredit = 0)
    {
        if (!prmisdefault(_amountCurCredit))
        {
            this.setField(fieldnum(LedgerJournalTrans, AmountCurCredit), _amountCurCredit);
        }

        return ledgerJournalTrans.AmountCurCredit;
    }

    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = '')
    {
        CurrencyCodeISO currencyCodeISO;
        ;

        if (!prmisdefault(_currencyCode))
        {
            // Because of de-serialization order, we can not convert the external ISO 4217 currency
            // code to the internal AX currency code.  This work is done in Axd prepareForSave
            this.setField(fieldnum(LedgerJournalTrans, CurrencyCode), _currencyCode);
        }

        if (this.valueMappingOutbound())
        {
            if (this.parmCompany())
            {
                changecompany(this.parmCompany())
                {
                    currencyCodeISO = Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode);
                }
            }
            else
            {
                currencyCodeISO = Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode);
            }

            return currencyCodeISO;
        }
        else
        {
            return ledgerJournalTrans.CurrencyCode;
        }

    }

    public selectableDataArea parmCompany(selectableDataArea _company = '')
    {
        if (!prmisdefault(_company))
        {
            this.setField(fieldnum(LedgerJournalTrans, Company), _company);
        }

        return ledgerJournalTrans.Company;
    }

    public LedgerJournalTransTxt parmTxt(LedgerJournalTransTxt _txt = '')
    {
        if (!prmisdefault(_txt))
        {
            this.setField(fieldnum(LedgerJournalTrans, Txt), _txt);
        }

        return ledgerJournalTrans.Txt;
    }

    public ExchRate parmExchRate(ExchRate _exchRate = 0)
    {
        if (!prmisdefault(_exchRate))
        {
            this.setField(fieldnum(LedgerJournalTrans, ExchRate), _exchRate);
        }

        return ledgerJournalTrans.ExchRate;
    }

    public LedgerJournalACType parmAccountType(LedgerJournalACType _accountType = LedgerJournalACType::Ledger)
    {
        boolean reMapAccountNum;
        ;

        if (!prmisdefault(_accountType))
        {
            // if doing inbound mapping and AccountNum previously set and
            // the AccountType doesn't match the inbound AccountType set flag
            // indicating account number remapping is required
            reMapAccountNum = this.valueMappingInbound() &&
            this.isFieldSet(fieldnum(LedgerJournalTrans, LedgerDimension)) &&
            ledgerJournalTrans.AccountType != _accountType;

            this.setField(fieldnum(LedgerJournalTrans, AccountType), _accountType);

            if (reMapAccountNum)
            {
                this.parmLedgerDimension(externalAccountNum);
            }
        }

        return ledgerJournalTrans.AccountType;
    }

    /// <summary>
    /// findAccountType
    /// </summary>
    protected void findAccountType()
    {
        LedgerJournalTable    ledgerJournalTable;
        ;
        if(this.parentAxBC() && this.parentAxBC().currentRecord().TableId == tablenum(LedgerJournalTable))
        {
            ledgerJournalTable = this.parentAxBC().currentRecord();
            switch(ledgerJournalTable.JournalType)
            {
                case LedgerJournalType::PurchaseLedger, LedgerJournalType::Payment :
                    ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;
                    break;
                case LedgerJournalType::CustPayment :
                    ledgerJournalTrans.AccountType = LedgerJournalACType::Cust;
                    break;
            }

        }

    }

    public DimensionDefault parmDefaultDimension(DimensionDefault _defaultDimension = 0)
    {
        if (!prmisdefault(_defaultDimension))
        {
            this.setField(fieldnum(LedgerJournalTrans, DefaultDimension), _defaultDimension);
        }

        return ledgerJournalTrans.DefaultDimension;
    }

    public DimensionDynamicAccount parmLedgerDimension(DimensionDynamicAccount _accountNum = 0)
    {
        DimensionDynamicAccount accountNum;
        Common                  currentRecord;

        if (!prmisdefault(_accountNum))
        {
            if (this.valueMappingInbound())
            {
                externalAccountNum = _accountNum;
                if (!this.isFieldSet(fieldnum(LedgerJournalTrans, AccountType)) && this.parentAxBC())
                {
                    this.findAccountType();
                }
                if(ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    //accountNum = DimensionStorage::getDynamicAccount(this.axCustAccount(DimensionStorage::ledgerDimension2AccountNum(_accountNum)), LedgerJournalACType::Cust);

                    accountNum = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(
                                this.axCustAccount(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_accountNum)), LedgerJournalACType::Cust);
                }
                if(ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    accountNum = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(
                                this.axVendAccount(LedgerDimensionFacade::getDisplayValueForLedgerDimension(_accountNum)), LedgerJournalACType::Vend);
                }
            }
            currentRecord = this.currentRecord();
            if (accountNum)
            {
                this.setField(fieldnum(LedgerJournalTrans, LedgerDimension), accountNum);
            }
            else
            {
                this.setField(fieldnum(LedgerJournalTrans, LedgerDimension), _accountNum);
            }
        }

        if (this.valueMappingOutbound())
        {
            switch(ledgerJournalTrans.AccountType)
            {
                case LedgerJournalACType::Vend :
                    return LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(this.axVendAccount(ledgerJournalTrans.parmAccount()), LedgerJournalACType::Vend);
                case LedgerJournalACType::Cust :
                    return LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(this.axVendAccount(ledgerJournalTrans.parmAccount()), LedgerJournalACType::Cust);
                default :
                    return ledgerJournalTrans.parmLedgerDimension();
            }
        }
        else
        {
            return ledgerJournalTrans.parmLedgerDimension();
        }
    }

    /// <summary>
    ///    Converts a value that relates to customer accounts by using the map policy that is passed to the
    ///    AxBC table class.
    /// </summary>
    /// <param name="_custAccount">
    ///    The value of the customer account that is to be converted.
    /// </param>
    /// <returns>
    ///    The converted value.
    /// </returns>
    /// <remarks>
    ///    The <c>axCustAccount</c> method is only used internally in the AxBC table classes.The map policy is
    ///    set up in the value mapping form.
    /// </remarks>
/*This method converts a CustAccount by using the MapPolicy that is given for the internal class*/
    protected str axCustAccount(str _custAccount)
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId = tableNum(CustTable);
        XMLMapExternalCode  xmlMapExternalCode;
        CustExtCodeId       custExtCodeId;
        str                 custAccount;

        xmlMapExternalCode = this.mapPolicy().xMLMapCustAccount();
        custExtCodeId      = this.mapPolicy().custAccountExtCodeId();

        if (!_custAccount || xmlMapExternalCode == XMLMapExternalCode::NotSpecified)
        {
            return _custAccount;
        }

        if (this.xmlDocDirection() == XMLDocDirection::Outbound)
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(xmlMapExternalCode,
                                                           tableId,
                                                           _custAccount,
                                                           custExtCodeId,
                                                           '');
            custAccount = xmlAxId2Code.xmlCode();
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(xmlMapExternalCode,
                                                           tableId,
                                                           ExtCodeSubModule::None,
                                                           _custAccount,
                                                           custExtCodeId,
                                                           '');
            custAccount = xmlCode2AxId.axId();
        }

        return custAccount;
    }

    /// <summary>
    ///    Converts a value that relates to customer account identification by using the map policy that is
    ///    passed to the AxBC table class.
    /// </summary>
    /// <param name="_vendAccount">
    ///    The value of the customer account identification that is to be converted.
    /// </param>
    /// <returns>
    ///    The converted value.
    /// </returns>
    /// <remarks>
    ///    The <c>axVendAccount</c> method is only used internally in the AxBC table classes.The map policy is
    ///    set up in the value mapping form.
    /// </remarks>
/*This method converts a VendAccount by using the MapPolicy that is given for the internal class*/
    protected VendAccount axVendAccount(str _vendAccount)
    {
        XMLAxId2Code        xmlAxId2Code;
        XMLCode2AxId        xmlCode2AxId;
        tableId             tableId = tableNum(VendTable);
        XMLMapExternalCode  xmlMapExternalCode;
        VendExtCodeId       vendExtCodeId;
        str                 vendAccount;

        xmlMapExternalCode = this.mapPolicy().xMLMapVendAccount();
        vendExtCodeId      = this.mapPolicy().vendAccountExtCodeId();

        if (!_vendAccount || xmlMapExternalCode == XMLMapExternalCode::NotSpecified)
        {
            return _vendAccount;
        }

        if (this.xmlDocDirection() == XMLDocDirection::Outbound)
        {
            xmlAxId2Code = XMLAxId2Code::newXMLMapExternalCode(xmlMapExternalCode,
                                                           tableId,
                                                           _vendAccount,
                                                           vendExtCodeId,
                                                           '');
            vendAccount = xmlAxId2Code.xmlCode();
        }
        else
        {
            xmlCode2AxId = XMLCode2AxId::newXMLMapExternalCode(xmlMapExternalCode,
                                                           tableId,
                                                           ExtCodeSubModule::None,
                                                           _vendAccount,
                                                           vendExtCodeId,
                                                           '');
            vendAccount = xmlCode2AxId.axId();
        }

        return vendAccount;
    }

    /// <summary>
    /// ledgerJournalTrans
    /// </summary>
    /// <param name = "_ledgerJournalTrans"> _ledgerJournalTrans </param>
    /// <returns> this.currentRecord() </returns>
    public LedgerJournalTrans ledgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        if (!prmisdefault(_ledgerJournalTrans))
        {
            this.setCurrentRecordFromExternal(_ledgerJournalTrans);
        }

        return this.currentRecord();
    }

    public LedgerJournalACType parmOffsetAccountType(LedgerJournalACType _offsetAccountType = LedgerJournalACType::Ledger)
    {
        if (!prmisdefault(_offsetAccountType))
        {
            this.setField(fieldnum(LedgerJournalTrans, OffsetAccountType), _offsetAccountType);

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                // If doing inbound mapping, set the OffsetAccount as it may not match the AccountType.
                this.parmOffsetLedgerDimension(externalOffsetAccount);
            }
        }

        return ledgerJournalTrans.OffsetAccountType;
    }

    public DimensionDynamicAccount parmOffsetLedgerDimension(DimensionDynamicAccount _offsetLedgerDimension = 0)
    {
        if (!prmisdefault(_offsetLedgerDimension))
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                if (!this.isFieldSet(fieldNum(LedgerJournalTrans, OffsetLedgerDimension)))
                {
                    this.setField(fieldNum(LedgerJournalTrans, OffsetLedgerDimension), _offsetLedgerDimension);
                }
            }
            else
            {
                this.setField(fieldnum(LedgerJournalTrans, OffsetLedgerDimension), _offsetLedgerDimension);
            }
        }

        return ledgerJournalTrans.OffsetLedgerDimension;
    }

}
